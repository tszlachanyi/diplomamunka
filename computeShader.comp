#version 460 core
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout (binding = 1, r32ui) readonly uniform uimage2D inputImage;
layout (binding = 2, r32ui) writeonly uniform uimage2D outputImage;

const uint MAXIMUM_TILE_VALUES = 32;
const uint MAXIMUM_RULES = 4;

uniform uint userChosenValue;
uniform ivec2 userChosenCoords;
uniform bool manualCoords;
uniform bool manualValue;
uniform float random1;
uniform float random2;
uniform uint TILE_VALUES;
uniform bool SUDOKU;
uniform uint RULES_AMOUNT;

uint cellValue;
uint chosenCellOldValue;
uint chosenCellIndex;
uint[MAXIMUM_TILE_VALUES] tileArray;
uint entropy;
uint chosenTileIndex;
uint chosenValue;

ivec2 chosenCoords; // Cell choosen to get collapsed
ivec2 currentCoords; // Current cell

// Buffers
layout(binding = 0) uniform atomic_uint minCounter;
layout(binding = 1) buffer ssbo
{
    ivec2 minEntropyCells[];
};
layout(binding = 2) uniform atomic_uint minEntropyCellsAmount;

layout(binding = 3) buffer collapsedCellsBuffer
{
    ivec2 collapsedCells[];
};
layout(binding = 4) uniform atomic_uint collapsedCellsAmount;


uint rules[MAXIMUM_RULES][3];

layout(binding = 5) buffer rulesBuffer
{
    uint allRules[MAXIMUM_TILE_VALUES][MAXIMUM_RULES][3];
};


uint nthBit(uint number, uint n)
{
	return (number >> n) & 1;
}

// All different tiles the cell can be currently		entropy is the size of this vector
void possibleTiles(in uint number, out uint[MAXIMUM_TILE_VALUES] tileArray, out uint entropy)
{
	entropy = 0;

	for (int i = 0; i < TILE_VALUES; i++)
	{
		if (nthBit(number, i) == 1)
		{
			tileArray[entropy]= i;
			entropy += 1;
		}
	}
}

// Use Rules to collapse the cell
void useRules()
{
	if(!SUDOKU) // Regular rules
	{
		for (int i = 0; i < RULES_AMOUNT; i++)
			{
				if (currentCoords == chosenCoords + ivec2(rules[i][0], rules[i][1]))
				{
					cellValue = cellValue &  rules[i][2];
				}
			}
	}
	else // Sudoku
	{
		// Same Column
		if (currentCoords.x == chosenCoords.x)
		{
			cellValue = cellValue & (~chosenValue);
		}

		// Same Row
		if (currentCoords.y == chosenCoords.y)
		{
			cellValue = cellValue & (~chosenValue);
		}

		// Same Block
		int blockSize = 3;
		ivec2 chosenBlockCoords = ivec2(vec2(chosenCoords) / vec2(blockSize));
		ivec2 currentBlockCoords = ivec2(vec2(currentCoords) / vec2(blockSize));

		if (chosenBlockCoords == currentBlockCoords)
		{
			cellValue = cellValue & (~chosenValue);
		}
	}
}

void main()
{
	uint minEntropy = atomicCounter(minCounter);
	// Current Value
	currentCoords = ivec2(gl_GlobalInvocationID.xy);
	cellValue = imageLoad(inputImage, currentCoords)[0];

	// Chosen Cell
	if (manualCoords)
	{
		chosenCoords = userChosenCoords;
	}
	else
	{
		chosenCellIndex = uint(floor(random1 * atomicCounter(minEntropyCellsAmount)));
		chosenCoords = minEntropyCells[chosenCellIndex];
	}
	

	// Chosen Value 
	if (manualValue)
	{
		chosenValue = userChosenValue;
		chosenTileIndex = uint(log2(chosenValue));
	}
	else
	{
		chosenCellOldValue = imageLoad(inputImage, chosenCoords)[0];
		possibleTiles(chosenCellOldValue, tileArray, entropy);
		chosenTileIndex = tileArray[uint(floor(random2 * entropy))];
		chosenValue = uint(pow(2, chosenTileIndex));
	}

	rules = allRules[chosenTileIndex];

	// Calculate output value
	if (currentCoords == chosenCoords)		// Give the chosen value to the chosen cell
	{		
		cellValue = chosenValue;
	}
	else	// Use rules on other cells
	{
		
		uint oldEntropy;
		possibleTiles(cellValue, tileArray, oldEntropy);

		useRules();

		// If entropy changed to 1, then add to collapsedCells array for reiteration
		uint newEntropy;
		possibleTiles(cellValue, tileArray, newEntropy);
		
		if (oldEntropy != 1 && newEntropy == 1)
		{
			uint i = atomicCounterIncrement(collapsedCellsAmount);
			collapsedCells[i] = currentCoords;
		}
	}

	imageStore(outputImage, currentCoords, uvec4(cellValue, 0u, 0u, 0u));
}